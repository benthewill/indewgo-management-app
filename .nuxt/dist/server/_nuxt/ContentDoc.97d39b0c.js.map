{"version":3,"file":"ContentDoc.97d39b0c.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/composables/head.mjs","../../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["import { useRoute, nextTick, useHead, unref, watch } from \"#imports\";\nexport const useContentHead = (_content, to = useRoute()) => {\n  const content = unref(_content);\n  const refreshHead = (data = content) => {\n    if (!to.path || !data) {\n      return;\n    }\n    const head = Object.assign({}, data?.head || {});\n    const title = head.title || data?.title;\n    if (title) {\n      head.title = title;\n    }\n    head.meta = [...head.meta || []];\n    const description = head?.description || data?.description;\n    if (description && head.meta.filter((m) => m.name === \"description\").length === 0) {\n      head.meta.push({\n        name: \"description\",\n        content: description\n      });\n    }\n    const image = head?.image || data?.image;\n    if (image && head.meta.filter((m) => m.property === \"og:image\").length === 0) {\n      if (typeof image === \"string\") {\n        head.meta.push({\n          property: \"og:image\",\n          content: image\n        });\n      }\n      if (typeof image === \"object\") {\n        const imageKeys = [\n          \"src\",\n          \"secure_url\",\n          \"type\",\n          \"width\",\n          \"height\",\n          \"alt\"\n        ];\n        for (const key of imageKeys) {\n          if (key === \"src\" && image.src) {\n            head.meta.push({\n              property: \"og:image\",\n              content: image[key]\n            });\n          } else if (image[key]) {\n            head.meta.push({\n              property: `og:image:${key}`,\n              content: image[key]\n            });\n          }\n        }\n      }\n    }\n    if (process.client) {\n      nextTick(() => useHead(head));\n    } else {\n      useHead(head);\n    }\n  };\n  watch(() => unref(_content), refreshHead, { immediate: true });\n};\n","<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer\";\nimport ContentQuery from \"./ContentQuery\";\nimport { useRoute, useContentHead } from \"#imports\";\nexport default defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    head: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  render(ctx) {\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (head) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (head) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\n</script>\n"],"names":["ContentRenderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,iBAAA,CAAA,UAAA,KAAA,SAAA,MAAA;AACA,QAAA,UAAA,MAAA,QAAA;AACA,QAAA,cAAA,CAAA,OAAA,YAAA;AACA,QAAA,CAAA,GAAA,QAAA,CAAA,MAAA;AACA;AAAA,IACA;AACA,UAAA,OAAA,OAAA,OAAA,CAAA,IAAA,6BAAA,SAAA,CAAA,CAAA;AACA,UAAA,QAAA,KAAA,UAAA,6BAAA;AACA,QAAA,OAAA;AACA,WAAA,QAAA;AAAA,IACA;AACA,SAAA,OAAA,CAAA,GAAA,KAAA,QAAA,CAAA,CAAA;AACA,UAAA,eAAA,6BAAA,iBAAA,6BAAA;AACA,QAAA,eAAA,KAAA,KAAA,OAAA,CAAA,MAAA,EAAA,SAAA,aAAA,EAAA,WAAA,GAAA;AACA,WAAA,KAAA,KAAA;AAAA,QACA,MAAA;AAAA,QACA,SAAA;AAAA,MACA,CAAA;AAAA,IACA;AACA,UAAA,SAAA,6BAAA,WAAA,6BAAA;AACA,QAAA,SAAA,KAAA,KAAA,OAAA,CAAA,MAAA,EAAA,aAAA,UAAA,EAAA,WAAA,GAAA;AACA,UAAA,OAAA,UAAA,UAAA;AACA,aAAA,KAAA,KAAA;AAAA,UACA,UAAA;AAAA,UACA,SAAA;AAAA,QACA,CAAA;AAAA,MACA;AACA,UAAA,OAAA,UAAA,UAAA;AACA,cAAA,YAAA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACA;AACA,mBAAA,OAAA,WAAA;AACA,cAAA,QAAA,SAAA,MAAA,KAAA;AACA,iBAAA,KAAA,KAAA;AAAA,cACA,UAAA;AAAA,cACA,SAAA,MAAA;AAAA,YACA,CAAA;AAAA,UACA,WAAA,MAAA,MAAA;AACA,iBAAA,KAAA,KAAA;AAAA,cACA,UAAA,YAAA;AAAA,cACA,SAAA,MAAA;AAAA,YACA,CAAA;AAAA,UACA;AAAA,QACA;AAAA,MACA;AAAA,IACA;AAGA;AACA,cAAA,IAAA;AAAA,IACA;AAAA,EACA;AACA,QAAA,MAAA,MAAA,QAAA,GAAA,aAAA,EAAA,WAAA,KAAA,CAAA;AACA;ACrDA,MAAA,YAAA,gBAAA;AAAA,EACE,MAAA;AAAA,EACA,OAAA;AAAA;;MAGI,UAAA;AAAA;;IAGF,SAAA;AAAA;;;;;MAME,UAAA;AAAA;;IAGF,OAAA;AAAA;MAEE,UAAA;AAAA;;;;MAKA,UAAA;AAAA;IAEF;AAAA;;AAGA,UAAA,QAAA;AACA,UAAA,EAAA,KAAA,SAAA,MAAA,OAAA,KAAA,IAAA;;;;MAIE,MAAA;AAAA;;AAGF,WAAA;AAAA;MAEE;AAAA,MACA;AAAA;;AAEI,cAAA,MAAA;AACE,2BAAA,IAAA;AAAA,UACF;AACA,kBAAA,WAAA,YAAA,+BAAA,EAAA,KAAA,MAAA,SAAA,WAAA,SAAA,GAAA,KAAA,OAAA;AAAA;AAEA,cAAA,MAAA;AACE,2BAAA,IAAA;AAAA,UACF;AACA,iBAAA;AAAA,YACEA;AAAAA,YACA,EAAA,OAAA,MAAA,SAAA,KAAA,GAAA,KAAA,OAAA;AAAA,YACA,EAAA,OAAA,CAAA,cAAA,+BAAA,SAAA,MAAA,MAAA,QAAA,IAAA,UAAA,WAAA,IAAA,EAAA;AAAA;;;;;;QAIJ,aAAA,CAAA;;AAAA,uDAAA,iBAAA,+BAAA,cAAA,EAAA,KAAA,MAAA,kFAAA;AAAA;AAAA,MACF;AAAA;EAEJ;AACF,CAAA;;;;;;;"}