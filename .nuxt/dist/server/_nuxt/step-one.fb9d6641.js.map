{"version":3,"file":"step-one.fb9d6641.js","sources":["../../../../store/newParkingLot.ts","../../../../components/mutation/insert/step-one.vue"],"sourcesContent":["import {defineStore} from 'pinia'\nimport {integer} from \"vscode-languageserver-types\";\nimport {GraphQLClient} from \"graphql-request\";\nimport gql from \"graphql-tag\";\n\nexport const useNewParkingLotStore = defineStore('newLot', {\n    state : () => {\n        return {\n            general: {\n                storedLotName: null,\n                storedLotNumber: null\n            },\n            address: {\n                storedLotStreetNumber: null,\n                storedLotStreetName: null,\n                storedLotStreetPostal: null\n            }\n        }\n    },\n    actions: {\n        async mutateData() {\n            const endpoint= 'https://rlwhlhzwqjpgcskfmeik.supabase.co/graphql/v1'\n            const graphQLClient = new GraphQLClient(endpoint, {\n                headers: {\n                    apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJsd2hsaHp3cWpwZ2Nza2ZtZWlrIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY2MTIwMjk2MywiZXhwIjoxOTc2Nzc4OTYzfQ.3ogB3rHmLDlbWL7lkTzlcRrxtDzy7AIcjxfmwhg-pw8',\n                    authorization: 'Bearer: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJsd2hsaHp3cWpwZ2Nza2ZtZWlrIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY2MTIwMjk2MywiZXhwIjoxOTc2Nzc4OTYzfQ.3ogB3rHmLDlbWL7lkTzlcRrxtDzy7AIcjxfmwhg-pw8'\n                }\n            })\n\n            const newGeneralLot = gql`\n                mutation newLot ($newName: String, $newNum: Int) {\n                    insertIntoparking_lots_generalCollection(\n                        objects: { parking_lot_name: $newName, parking_lot_number: $newNum }\n                    ) {\n                        records {\n                            parking_lot_id\n                            parking_lot_name\n                            parking_lot_number\n                        }\n                    }\n                }\n            `\n\n            let generalVariables = {\n                newName: this.general.storedLotName,\n                newNum: this.general.storedLotNumber\n            }\n\n            const newAddressesDetails = gql`\n                mutation newAddressesRequest ($newAddresses: [parking_lots_addressInsertInput!]!) {\n                    insertIntoparking_lots_addressCollection(objects: $newAddresses) {\n                        records {\n                            address_id\n                            parking_lot_id\n                            street_name\n                            street_number\n                        }\n                    }\n                }\n            `\n\n            let addressesVariables = {\n                \"newAddresses\": [\n                    {\n                        \"parking_lot_id\": 0,\n                        \"street_number\": this.address.storedLotStreetNumber,\n                        \"street_name\": this.address.storedLotStreetName,\n                        \"street_postal_code\": this.address.storedLotStreetPostal\n                    }\n                ]\n            }\n\n            const data = await graphQLClient.request(newGeneralLot, generalVariables)\n                .then(async (res) => {\n                    console.log(res.insertIntoparking_lots_generalCollection.records[0].parking_lot_id)\n                    addressesVariables.newAddresses[0].parking_lot_id = res.insertIntoparking_lots_generalCollection.records[0].parking_lot_id\n\n                    let addressData = await graphQLClient.request(newAddressesDetails, addressesVariables)\n\n                    console.log(addressData)\n                })\n\n        }\n\n    }\n})\n","<script>\n  export default {\n    props: ['formFields'],\n    methods: {\n      updateStore(name,num) {\n\n      }\n    },\n    data()  {\n      return {\n\n      }\n  }\n  }\n</script>\n\n<script setup>\n  import {useNewParkingLotStore} from \"../../../store/newParkingLot\";\n  import {storeToRefs} from \"pinia\";\n\n  const {general, address} = storeToRefs(useNewParkingLotStore())\n  const methods = useNewParkingLotStore()\n\n</script>\n\n<template>\n  <div class=\"card py-3 px-4 mt-5 mb-6 rounding is-shadowless\">\n\n\n    <div class=\"field\">\n      <label class=\"label\">Parking Lot Name ( {{ general.storedLotName }} )</label>\n      <div class=\"control\">\n        <input class=\"input\" type=\"text\" placeholder=\"Type Name Here\" v-model=\"general.storedLotName\">\n      </div>\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Parking Lot Number ( {{ general.storedLotNumber }} )</label>\n      <div class=\"control\">\n        <input class=\"input\" type=\"number\" placeholder=\"Type Number Here\" v-model=\"general.storedLotNumber\">\n      </div>\n    </div>\n<!--    ADDRESS-->\n    <div class=\"field\">\n      <label class=\"label\">Street Number ( {{ address.storedLotStreetNumber }} )</label>\n      <div class=\"control\">\n        <input class=\"input\" type=\"number\" placeholder=\"Street Number Here\" v-model=\"address.storedLotStreetNumber\">\n      </div>\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Street Name ( {{ address.storedLotStreetName }} )</label>\n      <div class=\"control\">\n        <input class=\"input\" type=\"text\" placeholder=\"Type Number Here\" v-model=\"address.storedLotStreetName\">\n      </div>\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Street Postal Code ( {{ address.storedLotStreetPostal }} )</label>\n      <div class=\"control\">\n        <input class=\"input\" type=\"text\" placeholder=\"Type Number Here\" v-model=\"address.storedLotStreetPostal\">\n      </div>\n    </div>\n\n    <button @click=\"methods.mutateData()\"> Add </button>\n\n\n  </div>\n</template>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKa,MAAA,wBAAwB,YAAY,UAAU;AAAA,EACvD,OAAQ,MAAM;AACH,WAAA;AAAA,MACH,SAAS;AAAA,QACL,eAAe;AAAA,QACf,iBAAiB;AAAA,MACrB;AAAA,MACA,SAAS;AAAA,QACL,uBAAuB;AAAA,QACvB,qBAAqB;AAAA,QACrB,uBAAuB;AAAA,MAC3B;AAAA,IAAA;AAAA,EAER;AAAA,EACA,SAAS;AAAA,IACL,MAAM,aAAa;AACf,YAAM,WAAU;AACV,YAAA,gBAAgB,IAAI,cAAc,UAAU;AAAA,QAC9C,SAAS;AAAA,UACL,QAAQ;AAAA,UACR,eAAe;AAAA,QACnB;AAAA,MAAA,CACH;AAED,YAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AActB,UAAI,mBAAmB;AAAA,QACnB,SAAS,KAAK,QAAQ;AAAA,QACtB,QAAQ,KAAK,QAAQ;AAAA,MAAA;AAGzB,YAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa5B,UAAI,qBAAqB;AAAA,QACrB,gBAAgB;AAAA,UACZ;AAAA,YACI,kBAAkB;AAAA,YAClB,iBAAiB,KAAK,QAAQ;AAAA,YAC9B,eAAe,KAAK,QAAQ;AAAA,YAC5B,sBAAsB,KAAK,QAAQ;AAAA,UACvC;AAAA,QACJ;AAAA,MAAA;AAGS,YAAM,cAAc,QAAQ,eAAe,gBAAgB,EACnE,KAAK,OAAO,QAAQ;AACjB,gBAAQ,IAAI,IAAI,yCAAyC,QAAQ,GAAG,cAAc;AAClF,2BAAmB,aAAa,GAAG,iBAAiB,IAAI,yCAAyC,QAAQ,GAAG;AAE5G,YAAI,cAAc,MAAM,cAAc,QAAQ,qBAAqB,kBAAkB;AAErF,gBAAQ,IAAI,WAAW;AAAA,MAAA,CAC1B;AAAA,IAET;AAAA,EAEJ;AACJ,CAAC;ACpFC,oBAAe;AAAA,EACb,OAAO,CAAC,YAAY;AAAA,EACpB,SAAS;AAAA,IACP,YAAY,MAAK,KAAK;AAAA,IAErB;AAAA,EACF;AAAA,EACD,OAAQ;AACN,WAAO,CAEN;AAAA,EACJ;AACA;;;;;AAOD,UAAM,EAAC,SAAS,QAAO,IAAI,YAAY,sBAAqB,CAAE;AAC9C,0BAAuB;;;;;;;;;;;;"}